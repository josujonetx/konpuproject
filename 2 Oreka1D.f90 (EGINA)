module oreka1

        use tipoak
        public:: Plasma1D, karak
        integer, parameter, public:: n=100, o=10000!Partikula kop eta iterazio kop      

        contains

                subroutine Plasma1D(p)

                        use tipoak
                        
                        real(kind=dp), dimension(n):: x, r, v, a !100 partikula izango direlako 
                        integer, dimension(n):: c !kargen balioak
                        integer:: i, j,l,k
                        real(kind=dp):: V0,U0,vm,w, dt, m,t
                        Real(kind=dp), dimension(:,:,:), intent(inout):: p

                        U0=10.0_dp
                        
                        potentziala: do
                        !Potentzialaren kalkuloa:

                        call random_number(x) !100 posizio aleaorio [0,1)
        
                        do i=1,n/2 !kargen balioak 1/-1
                                c(i)=1
                                c(i+n/2)=-1
                        enddo
        
                   c(n)=-1 !partikula kopurua bakoitia balitz

                   V0=0.0_dp

                        do i=1,n
                        do j=1,n
                                V0=V0-c(i)*c(j)*abs(x(i)-x(j))
                        enddo
                        enddo

                !kalkuluak simplifikatzeko interakzio guztiak 2 bider batu dira


                   V0=V0/2

                !potentzialak ezin duenez sistemaren energia gainditu prozesua errepikatuko da:

                if (V0<U0) then

                        exit potentziala
                        
                end if

                end do potentziala

                ! Partiukula ez erlatibistak (E=1/2·m·v^2) eta eta denek m=1 onartuko dugu. 
                ! Hortaz abiaduraren bataz besteko kuadratikoa-ren erroa:

                vm=sqrt((U0-V0)*2)

                call random_number(r) !abiaduren aleatoriotasuna bermatzeko r-[0,1)

                r=2*r-1 ! r->(-1,1)

                w=sqrt(sum(r*r))

                v=r*vm/w  !100 elementuko abiaduren lista bat

                !x lista ordenatuko dugu errazagoa izan dadin ondorengo kalkuloa
                do i=1,n-1
                        do j=i+1,n
                        if (x(i)>x(j)) then
                                 m=x(i)
                                x(i)=x(j)
                                x(j)=m
                                m=c(i)
                                c(i)=c(j)
                                c(j)=m
                               
                        end if
                        end do
                end do

                ! Azelerazioa:
                do i=1,n
                        a(i)=0.0_dp
                        do j=1,i-1
                                a(i)=a(i)+c(i)*c(j)
                        enddo
                        do j=i+1,n
                                 a(i)=a(i)-c(i)*c(j)
                         enddo
                enddo

!dinamika
do j=1,o
        do i=1,4
                p(j,1,i)=t
        enddo
        do i=1,n
                p(j,i+1,1)=x(i)
                p(j,i+1,2)=v(i)
                p(j,i+1,3)=a(i)
                p(j,i+1,4)=c(i)
        enddo 

    call karak(x,v,a,dt,l) !Denbora karakteristikoa (dt) eta prozesua (l)

    do i=1,n
        x(i)=x(i)+v(i)*dt+(a(i)/2)*dt**2   ! Eboluzio denborala
        v(i)=v(i)+a(i)*dt
    enddo

    if (l==0) then
        v(1)=-v(1) !ezkerrako paretaren aurkako talka
    else if (l==n) then
        v(n)=-v(n) !eskuineko paretaren aurkako talka
    else !gurutzatzea
        m=x(l)
        x(l)=x(l+1)
        x(l+1)=m
        m=v(l)
        v(l)=v(l+1)
        v(l+1)=m
        m=a(l+1)
        a(l+1)=a(l)+2*c(l)*c(l+1)
        a(l)=m-2*c(l)*c(l+1)
        m=c(l)
        c(l)=c(l+1)
        c(l+1)=m
    end if
    t=t+dt
enddo

end subroutine Plasma1D


subroutine karak(x,v,a,dt,l) !Denbora karakterestikoa

        real(kind=dp), dimension(:), intent(in):: x, a, v
        integer:: i,j,k
        real(kind=dp):: d,b,c,t1,t2
        real(kind=dp), intent(inout)::dt
        integer, intent(inout):: l
        
        dt=100.0
        k=l
            ! 1. partikula ezker paretarekin talka 

        t1=(-v(1)-sqrt(v(1)**2-2*a(1)*x(1)))/a(1)
        t2=(-v(1)+sqrt(v(1)**2-2*a(1)*x(1)))/a(1)

            if (abs(t1)<1E-9) then !filtro bat da, batzuetan zehaztaun faltak bednbora tarte txikiegiak ematen baititu
                    t1=100.0
            else if (abs(t2)<1E-9) then
                    t2=100.0
            end if

        if ((t1<0.0_dp) .and. (t2>0.0_dp)) then
           dt=t2
           l=0
        else if ((t1>0.0_dp) .and. (t2<0.0_dp)) then
            dt=t1
            l=0
        else if ((t1>0.0_dp) .and. (t2>0.0_dp) .and. (t1<t2)) then
           dt=t1
           l=0
        else if ((t1>0.0_dp) .and. (t2>0.0_dp) .and. (t1>t2)) then
           dt=t1
           l=0
        end if
      
      ! n. partikula eskuin paretarekin talka 

        t1=(-v(n)-sqrt(v(n)**2-2*a(n)*(-1.0+x(n))))/a(n)
        t2=(-v(n)+sqrt(v(n)**2-2*a(n)*(-1.0+x(n))))/a(n)

        if (abs(t1)<1E-9) then
                t1=100.0
        else if (abs(t2)<1E-9) then
                t2=100.0
        end if

        if ((t1<0.0_dp) .and. (t2>0.0_dp) .and. (dt>t2)) then
           dt=t2
        l=n
        else if ((t1>0.0_dp) .and. (t2<0.0_dp) .and. (dt>t1) ) then
           dt=t1
           l=n
        else if ((t1>0.0_dp) .and. (t2>0.0_dp) .and. (t1<t2) .and. (dt>t1)) then
           dt=t1
           l=n
        else if ((t1>0.0_dp) .and. (t2>0.0_dp) .and. (t1>t2) .and. (dt>t2)) then
           dt=t2
           l=n
        end if

            !Partikulak elkar gurutzatu

        do i=1,n-1
            c=x(i+1)-x(i)
            b=v(i+1)-v(i)
            d=(a(i+1)-a(i))/2
            t1=(-b-sqrt(b**2-4*d*c))/2/d
            t2=(-b+sqrt(b**2-4*d*c))/2/d

            if (abs(t1)<1E-9) then
                    t1=100.0
            else if (abs(t2)<1E-9) then
                    t2=100.0
            end if
            if ((t1<0.0_dp) .and. (t2>0.0_dp) .and. (dt>t2)) then
               dt=t2
               l=i
            else if ((t1>0.0_dp) .and. (t2<0.0_dp) .and. (dt>t1) ) then
               dt=t1
               l=i
            else if ((t1>0.0_dp) .and. (t2>0.0_dp) .and. (t1<t2) .and. (dt>t1)) then
               dt=t1
               l=i
            else if ((t1>0.0_dp) .and. (t2>0.0_dp) .and. (t1>t2) .and. (dt>t2)) then
               dt=t2
               l=i
            end if
        enddo
    end subroutine karak

end module oreka1

